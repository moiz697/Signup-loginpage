{"ast":null,"code":"var _jsxFileName = \"/Users/moiz/Desktop/Signup-loginpage/Frontend/src/components/Forgetpassword.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css'; // Simulate API call to verify the email\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst mockEmailVerification = email => {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (email === 'test@example.com') {\n        resolve({\n          success: true\n        });\n      } else {\n        reject({\n          message: 'Email not found in the database'\n        });\n      }\n    }, 1000);\n  });\n};\n\nconst ForgotPasswordForm = () => {\n  _s();\n\n  const [email, setEmail] = useState('');\n  const [error, setError] = useState('');\n  const [isEmailSent, setIsEmailSent] = useState(false);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  const handleResetPassword = async e => {\n    e.preventDefault();\n    setError('');\n    setIsSubmitting(true);\n\n    try {\n      const response = await mockEmailVerification(email);\n\n      if (response.success) {\n        setIsEmailSent(true);\n      } else {\n        setError('Email not found in the database');\n      }\n    } catch (error) {\n      setError('Error occurred while processing the request');\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container mt-5\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row justify-content-center\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-md-6\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"card-body\",\n            children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n              className: \"card-title\",\n              children: \"Forgot Password\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 50,\n              columnNumber: 15\n            }, this), isEmailSent ? /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"alert alert-success\",\n              role: \"alert\",\n              children: \"Reset link has been sent to your email.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 52,\n              columnNumber: 17\n            }, this) : /*#__PURE__*/_jsxDEV(\"form\", {\n              onSubmit: handleResetPassword,\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"form-group\",\n                children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                  htmlFor: \"email\",\n                  children: \"Email\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 58,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"email\",\n                  className: \"form-control\",\n                  id: \"email\",\n                  placeholder: \"Enter your email\",\n                  value: email,\n                  onChange: e => setEmail(e.target.value),\n                  disabled: isSubmitting\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 59,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 57,\n                columnNumber: 19\n              }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"alert alert-danger\",\n                role: \"alert\",\n                children: error\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 69,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                type: \"submit\",\n                className: \"btn btn-primary\",\n                disabled: isSubmitting,\n                children: isSubmitting ? 'Submitting...' : 'Submit'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 70,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 56,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ForgotPasswordForm, \"fN7XYluQx/BrtUNYG+9Sja0UAN4=\");\n\n_c = ForgotPasswordForm;\nexport default ForgotPasswordForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"ForgotPasswordForm\");","map":{"version":3,"sources":["/Users/moiz/Desktop/Signup-loginpage/Frontend/src/components/Forgetpassword.js"],"names":["React","useState","mockEmailVerification","email","Promise","resolve","reject","setTimeout","success","message","ForgotPasswordForm","setEmail","error","setError","isEmailSent","setIsEmailSent","isSubmitting","setIsSubmitting","handleResetPassword","e","preventDefault","response","target","value"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n// Simulate API call to verify the email\nconst mockEmailVerification = (email) => {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (email === 'test@example.com') {\n        resolve({ success: true });\n      } else {\n        reject({ message: 'Email not found in the database' });\n      }\n    }, 1000);\n  });\n};\n\nconst ForgotPasswordForm = () => {\n  const [email, setEmail] = useState('');\n  const [error, setError] = useState('');\n  const [isEmailSent, setIsEmailSent] = useState(false);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  const handleResetPassword = async (e) => {\n    e.preventDefault();\n\n    setError('');\n    setIsSubmitting(true);\n\n    try {\n      const response = await mockEmailVerification(email);\n\n      if (response.success) {\n        setIsEmailSent(true);\n      } else {\n        setError('Email not found in the database');\n      }\n    } catch (error) {\n      setError('Error occurred while processing the request');\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  return (\n    <div className=\"container mt-5\">\n      <div className=\"row justify-content-center\">\n        <div className=\"col-md-6\">\n          <div className=\"card\">\n            <div className=\"card-body\">\n              <h4 className=\"card-title\">Forgot Password</h4>\n              {isEmailSent ? (\n                <div className=\"alert alert-success\" role=\"alert\">\n                  Reset link has been sent to your email.\n                </div>\n              ) : (\n                <form onSubmit={handleResetPassword}>\n                  <div className=\"form-group\">\n                    <label htmlFor=\"email\">Email</label>\n                    <input\n                      type=\"email\"\n                      className=\"form-control\"\n                      id=\"email\"\n                      placeholder=\"Enter your email\"\n                      value={email}\n                      onChange={(e) => setEmail(e.target.value)}\n                      disabled={isSubmitting}\n                    />\n                  </div>\n                  {error && <div className=\"alert alert-danger\" role=\"alert\">{error}</div>}\n                  <button type=\"submit\" className=\"btn btn-primary\" disabled={isSubmitting}>\n                    {isSubmitting ? 'Submitting...' : 'Submit'}\n                  </button>\n                </form>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ForgotPasswordForm;\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}